<?php

/**
 * BaseBill
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $responsible_id
 * @property integer $profile_id
 * @property integer $bank_id
 * @property integer $service_id
 * @property string $turning_check
 * @property decimal $ammount
 * @property Profile $Profile
 * @property Bank $Bank
 * @property Service $Service
 * 
 * @method integer getId()             Returns the current record's "id" value
 * @method integer getResponsibleId()  Returns the current record's "responsible_id" value
 * @method integer getProfileId()      Returns the current record's "profile_id" value
 * @method integer getBankId()         Returns the current record's "bank_id" value
 * @method integer getServiceId()      Returns the current record's "service_id" value
 * @method string  getTurningCheck()   Returns the current record's "turning_check" value
 * @method decimal getAmmount()        Returns the current record's "ammount" value
 * @method Profile getProfile()        Returns the current record's "Profile" value
 * @method Bank    getBank()           Returns the current record's "Bank" value
 * @method Service getService()        Returns the current record's "Service" value
 * @method Bill    setId()             Sets the current record's "id" value
 * @method Bill    setResponsibleId()  Sets the current record's "responsible_id" value
 * @method Bill    setProfileId()      Sets the current record's "profile_id" value
 * @method Bill    setBankId()         Sets the current record's "bank_id" value
 * @method Bill    setServiceId()      Sets the current record's "service_id" value
 * @method Bill    setTurningCheck()   Sets the current record's "turning_check" value
 * @method Bill    setAmmount()        Sets the current record's "ammount" value
 * @method Bill    setProfile()        Sets the current record's "Profile" value
 * @method Bill    setBank()           Sets the current record's "Bank" value
 * @method Bill    setService()        Sets the current record's "Service" value
 * 
 * @package    limbo
 * @subpackage model
 * @author     Damian Suarez / Laura Melo
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseBill extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('bill');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('responsible_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('profile_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('bank_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('service_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('turning_check', 'string', 40, array(
             'type' => 'string',
             'length' => 40,
             ));
        $this->hasColumn('ammount', 'decimal', 6, array(
             'type' => 'decimal',
             'length' => 6,
             ));


        $this->setAttribute(Doctrine_Core::ATTR_EXPORT, Doctrine_Core::EXPORT_ALL);

        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Profile', array(
             'local' => 'profile_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Bank', array(
             'local' => 'bank_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Service', array(
             'local' => 'service_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}